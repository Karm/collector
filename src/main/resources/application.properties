# General
%prod.url=https://collector.foci.life
%stage.url=https://stage-collector.foci.life
%dev.url=http://localhost:8080
%test.url=http://localhost:8081
quarkus.log.level=INFO
quarkus.native.resources.includes=version.txt
%test.quarkus.native.resources.includes=version.txt,import-dev.sql
%test.quarkus.log.file.enable=true
%test.quarkus.log.file.path=quarkus.log

# DB
# Credentials for %prod and %stage env are in the .env file
quarkus.datasource.db-kind=mariadb
%dev.quarkus.datasource.username=quarkus
%dev.quarkus.datasource.password=quarkus
#%dev.quarkus.hibernate-orm.database.generation=update
%dev.quarkus.hibernate-orm.database.generation=drop-and-create
%dev.quarkus.hibernate-orm.log.sql=false
%test.quarkus.hibernate-orm.database.generation=drop-and-create
%test.quarkus.hibernate-orm.log.sql=false
quarkus.hibernate-orm.database.generation=validate
%dev.quarkus.hibernate-orm.sql-load-script=import-dev.sql
%test.quarkus.hibernate-orm.sql-load-script=import-dev.sql
quarkus.datasource.devservices.port=49158
quarkus.datasource.devservices.image-name=mariadb:10.3
quarkus.datasource.db-version=10.3

%prod.quarkus.datasource.jdbc.url=jdbc:mariadb://localhost:3306/collector
%prod.quarkus.hibernate-orm.database.generation=validate
%prod.quarkus.hibernate-orm.sql-load-script=no-file

%stage.quarkus.datasource.jdbc.url=jdbc:mariadb://localhost:3306/stage_collector
%stage.quarkus.hibernate-orm.database.generation=update
%stage.quarkus.hibernate-orm.sql-load-script=no-file

# Caching tokens, revocation is not immediate
# TODO: Test whether it does what it seems to do.
#       DB is queried each time, regardless of the cache...
quarkus.hibernate-orm.cache.Token.memory.object-count=1000
quarkus.hibernate-orm.cache.Token.expiration.max-idle=PT30S
quarkus.hibernate-orm.statistics=true

# Auth
quarkus.http.auth.form.enabled=true
quarkus.http.auth.basic=false
quarkus.http.auth.form.login-page=/login
quarkus.http.auth.form.error-page=/error.html
quarkus.http.auth.form.landing-page=/auth.html
quarkus.http.auth.form.redirect-after-login=false
quarkus.http.same-site-cookie.\"same-site-cookie\".value=strict
quarkus.http.auth.permission.authenticated.paths=/api/*,/auth.html
quarkus.http.auth.permission.authenticated.policy=authenticated
quarkus.http.same-site-cookie.session.value=Strict
quarkus.http.auth.form.timeout=PT30M
quarkus.http.auth.form.new-cookie-interval=PT1M
quarkus.http.auth.form.cookie-name=quarkus-credential
quarkus.http.auth.session.encryption-key=Set in .env file

# CORS
quarkus.http.cors=true
quarkus.http.cors.origins=https://stage-collector.foci.life,https://collector.foci.life,https://dashboard-collector.foci.life
%dev.quarkus.http.cors.origins=http://127.0.0.1:7777,http://127.0.0.1:8080
quarkus.http.cors.methods=GET,POST,PUT,DELETE,OPTIONS
quarkus.http.cors.headers=Content-Type,token

# Email
quarkus.mailer.auth-methods=DIGEST-MD5 CRAM-SHA256 CRAM-SHA1 CRAM-MD5 PLAIN LOGIN
quarkus.mailer.from=robot@collector.foci.life
quarkus.mailer.host=smtppro.zoho.eu
quarkus.mailer.port=587
quarkus.mailer.start-tls=REQUIRED
quarkus.mailer.username=Set in .env file
quarkus.mailer.password=Set in .env file
%dev.quarkus.mailer.mock=true
%test.quarkus.mailer.mock=true

# Quinoa
quarkus.quinoa.package-manager=yarn
quarkus.quinoa.package-manager-install=true
quarkus.quinoa.package-manager-install.node-version=18.1.0
quarkus.quinoa.package-manager-install.yarn-version=1.22.17

# Messages
signup.email.message.body=\
Hello %s,\n\
Use this one time token to set your password:\n\n\
curl -X POST --data 'password=This is my password.&token=%s' %s/public/changepasswd
signup.email.message.subject=Welcome to the Collector collective!
forgot.passwd.email.message.subject=Collector: Password reset instructions
signup.email.contact=admin@collector.foci.life

signup.error.username.exists={"error":"User of that name already exists."}
signup.error.user.not.found={"error":"Either username or email is wrong, not in our records."}
signup.error.email.exists={"error":"Email is used by someone else."}
signup.error.email.match={"error":"Email is expected to match regexp %s."}
signup.error.username.match={"error":"Username is expected to match regexp %s."}
signup.error.token.match={"error":"Token is expected to match regexp %s."}
signup.error.password.match={"error":"Password is expected to match regexp %s."}
signup.error.token.not.found={"error":"There is nothing matching the hash of your token. \
Try signing up again, please."}
signup.success.user.created={"message":"User was successfully created. \
Check your email for further instructions. \
Having issues? Drop a message to %s."}
forgot.passwd.success={"message":"Password reset was successfully requested. \
Check your email for further instructions. \
Having issues? Drop a message to %s."}
signup.success.password.changed={"message":"Your password was successfully changed. \
Try logging in, e.g. curl -X POST -b cookie.txt -c cookie.txt \
--data 'j_username=Your_Username&j_password=Your Password' %s/j_security_check"}

tokens.error.not.found={"error":"Token not found."}
tokens.error.permission.match={"error":"Permission is expected to match regexp %s."}
tokens.success.created={"token":"%s","message":"Save the token safely. \
This is the only time it could be displayed."}
tokens.success.deleted={"message":"Deleted tokens: %d"}
